
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.3.0pr3/build/cssreset/reset-min.css"> 
	<link rel="stylesheet" type="text/css" href="http://axosoft.github.com/yui3-gallery/layout/build/assets/skins/sam/gallery-axo-layout.css"> 
	<link rel="stylesheet" type="text/css" href="http://axosoft.github.com/yui3-gallery/layout/build/assets/skins/sam/gallery-axo-layout-skin.css"> 

	<script type="text/javascript" src="http://jgraph.github.io/mxgraph/javascript/src/js/mxClient.js"></script>

	<script type="text/javascript" src="http://yui.yahooapis.com/3.3.0pr3/build/yui/yui.js"></script>

	<script type="text/javascript" src="http://axosoft.github.com/yui3-gallery/layout/build/gallery-axo-layout.js"></script>

    <title>PBase Provenance Database</title>

	<style>

	.yui3-skin-sam .yui3-layout-vertical > .yui3-layout-content {
		border:2px solid black;
		padding:1px;
	}

	.yui3-skin-sam .yui3-layoutchild {
		opacity:0.8;
		border:1px solid black;
	}

	#left {
		background:white;
	}

	#right {
		background:white;
	}

	#top {
		/*background:blue;*/
		background:#90A1CE;
		opacity:1.0;
	}

	#bottom {
		background:#FFFFAD;
		opacity:1.0;
		/*z-index:100;*/
	}

	#center1 {
		background:white;
		overflow:scroll;
	}
	
	#center2 {
		background:white;
		overflow:scroll;
	}

	#bottom .yui3-layoutchild {
		background:white;
		border:1px solid black;
	}

	#bottom1 {
		opacity:0.1;
	}

	.yui3-layoutchild-content .yui3-widget-hd {
		background: white;
		color: black;
		border:solid black 1px;
		padding-left:5px;
		height:23px;
	}

	.yui3-layoutChild-button-collapse, .yui3-layoutChild-button-expand {
		width: 17px;
		height: 13px;
		right:5px;
		top:5px;
		position: absolute;
		background: transparent url(http://developer.yahoo.com/yui/build/layout/assets/skins/sam/layout_sprite.png) no-repeat;
	}

	#left .yui3-layoutChild-button-collapse {
		background-position: -20px -160px;
	} 

	#left .yui3-layoutChild-button-expand {
		background-position: -20px -140px;
	} 
	
	#center1 .yui3-layoutChild-button-collapse {
		background-position: -20px -160px;
	} 

	#center1 .yui3-layoutChild-button-expand {
		background-position: -20px -140px;
	}

	#right .yui3-layoutChild-button-collapse {
		background-position: -20px -200px;
	} 

	#right .yui3-layoutChild-button-expand {
		background-position: -20px -120px;
	} 
	
	#center1 > .yui3-widget-content-expanded {
		height: 25px;
	}
	
	#center1 > .yui3-widget-content-expanded > .yui3-widget-hd {
		border: 0px;
	}
	
	#center2 > .yui3-widget-content-expanded > .yui3-widget-hd {
		border: 0px;
	}
	
	#left > .yui3-widget-content-expanded {
		height: 25px;
	}
	
	#center2 > .yui3-widget-content-expanded {
		height: 25px;
	}
	
	#right > .yui3-widget-content-expanded {
		height: 25px;
	}
	
	#loadWFTabContainer, #queryWFTabContainer, #loadTraceTabContainer, #queryTraceTabContainer {
		height: 540px;
		padding-top: 20px;
		z-index: -1;
	}

	</style>

</head>

<body class="yui3-skin-sam">

<script>

function displayGraphJSON(container, graphJSON, btnContainer, isTrace, Y) {
	// Checks if the browser is supported
	if (!mxClient.isBrowserSupported()) {
		// Displays an error message if the browser is not supported.
		mxUtils.error('Browser is not supported!', 200, false);
	}
	else {
		container.innerHTML = "";
		var propertiesLabel = 'propertiesLabel';
		var encodingLabel = 'encodingLabel';
		mxEvent.disableContextMenu(document.body);
		// Enables crisp rendering of rectangles in SVG
		mxRectangleShape.prototype.crisp = true;	
		// Creates the graph inside the given container
		var graph = new mxGraph(container);
		graph.graphHandler.scaleGrid = true;
		graph.setPanning(true);
		// Enables rubberband selection
		new mxRubberband(graph);
		// Gets the default parent for inserting new cells. This
		// is normally the first child of the root (ie. layer 0).
		var parent = graph.getDefaultParent();					
		// Adds cells to the model in a single step
		graph.getModel().beginUpdate();
		try {
			var graphNodesArray = new Array();
			var graphEdgesArray = new Array();
			if( !isTrace )
				fillWFGraph(graphJSON, graph, parent, graphNodesArray, graphEdgesArray, 
						propertiesLabel, encodingLabel);
			else
				fillTraceGraph(graphJSON, graph, parent, graphNodesArray, graphEdgesArray,
						propertiesLabel, encodingLabel);
			var hierLayout = new mxHierarchicalLayout(graph);
			hierLayout.execute(parent);
		}
		finally {
			// Updates the display
			graph.getModel().endUpdate();
		}
		graph.centerZoom = false;
		var bounds = graph.getGraphBounds();
		graph.view.setTranslate( (container.clientWidth/2) - (bounds.width/2), 
				(container.clientHeight/2) - (bounds.height/2) );
		activateButtons(graph, hierLayout, parent, btnContainer, Y);
		
		//Add properties and encoding labels
		graph[propertiesLabel + 'Visible'] = false;
		graph[encodingLabel + 'Visible'] = false;
		prepareGraphForLabels(graph);
		addLabel(graph, propertiesLabel, true);
		addLabel(graph, encodingLabel, false);
		activateLabelButton(graph, btnContainer, 'PropertiesBtn', propertiesLabel, Y);
		activateLabelButton(graph, btnContainer, 'EncodingBtn', encodingLabel, Y);
	}
}


function fillWFGraph(graphJSON, graph, parent, graphNodesArray, graphEdgesArray, propertiesLabel, encodingLabel) {
	var vertex = null;
	var edge = null;
	var tuple = null;
	// Workflow rectangle fill color #BAE3E4 (#7FB4B5 darker)
	// Workflow rectangle stroke color #1AA4A7
	for(var i = 0; i < graphJSON.nodes.length; i++) {
		tuple = graphJSON.nodes[i];
		if( graphNodesArray[tuple.nodeId] == undefined ) {
			//vertex = graph.insertVertex(parent, null, tuple.nodeId, 0, 0, 150, 30, "strokeColor=#1AA4A7;fillColor=#BAE3E4;fontColor=#000000");
			vertex = graph.insertVertex(parent, null, tuple.nodeId, 0, 0, 150, 30, "strokeColor=#1AA4A7;fillColor=#7FB4B5;fontColor=#000000");
			graphNodesArray[tuple.nodeId] = vertex;
			vertex[propertiesLabel] = generateNodeText(tuple);
			vertex[encodingLabel] = '' + i;
		}
	}
	for(var i = 0; i < graphJSON.edges.length; i++) {
		tuple = graphJSON.edges[i];
		edge = graph.insertEdge(parent, null, tuple.edgeLabel, graphNodesArray[tuple.startNodeId], 
				graphNodesArray[tuple.endNodeId], "strokeColor=#2E2E2E;startArrow=oval");
		graphEdgesArray[tuple.startNodeId + "_" + tuple.endNodeId] = edge;
	}
}


function fillTraceGraph(graphJSON, graph, parent, graphNodesArray, graphEdgesArray, propertiesLabel, encodingLabel) {
	var vertex = null;
	var edge = null;
	var tuple = null;
	// Trace rectangle fill color #DCF1F1 (#7FB4B5 darker)
	// Trace rectangle stroke color #1AA4A7
	// Trace ellipse fill color #F6F6CC (#C4C489 darker)
	// Trace ellipse stroke color #CCCC00
	for(var i = 0; i < graphJSON.nodes.length; i++) {
		tuple = graphJSON.nodes[i];
		if( graphNodesArray[tuple.nodeId] == undefined ) {
			if(tuple.type == "data")
				//vertex = graph.insertVertex(parent, null, tuple.nodeId, 0, 0, 150, 30, "shape=ellipse;strokeColor=#CCCC00;fillColor=#F6F6CC;fontColor=#000000");
				vertex = graph.insertVertex(parent, null, tuple.nodeId, 0, 0, 150, 30, "shape=ellipse;strokeColor=#CCCC00;fillColor=#C4C489;fontColor=#000000");
			else
				//vertex = graph.insertVertex(parent, null, tuple.nodeId, 0, 0, 150, 30, "strokeColor=#1AA4A7;fillColor=#DCF1F1;fontColor=#000000");
				vertex = graph.insertVertex(parent, null, tuple.nodeId, 0, 0, 150, 30, "strokeColor=#1AA4A7;fillColor=#7FB4B5;fontColor=#000000");
			graphNodesArray[tuple.nodeId] = vertex;
			vertex[propertiesLabel] = generateNodeText(tuple);
			//vertex[encodingLabel] = '' + i;
			vertex[encodingLabel] = '' + tuple.treecover;
		}
	}
	for(var i = 0; i < graphJSON.edges.length; i++) {
		tuple = graphJSON.edges[i];
		edge = graph.insertEdge(parent, null, tuple.edgeLabel, graphNodesArray[tuple.endNodeId], 
    			graphNodesArray[tuple.startNodeId], "strokeColor=#2E2E2E;fontColor=#000000;startArrow=classic;endArrow=oval");
		graphEdgesArray[tuple.endNodeId + "_" + tuple.startNodeId] = edge;
	}
}


function generateNodeText(jsonObj) {
	var nodeText = '';
	for(var key in jsonObj) {
		var propertyVal = jsonObj[key];
		if( (key.length + propertyVal.length) <= 30 )
			nodeText += key + ':' + propertyVal + '\n';
	}
	return nodeText.substring(0, nodeText.length-1);
}


function activateLabelButton(graph, containerID, btnName, labelName, Y) {
	var mLabelName = labelName;
	var btn = Y.one('#' + containerID + btnName);
	var btnFunc = function(evt) {
		graph[mLabelName + 'Visible'] = !graph[mLabelName + 'Visible'];
		graph.refresh();
	}
	btn.set('onclick', btnFunc);
}


function prepareGraphForLabels(graph) {
	// Overrides method to hide relative child vertices
	graph.isCellVisible = function(cell) {
		return !this.model.isVertex(cell) || cell.geometry == null ||
			!cell.geometry.relative ;
	};
}


function addLabel(graph, labelName, isTop) {
	
	var mLabelName = labelName;
	var mIsTop = isTop;
	
	graph['get' + mLabelName] = function(cell) {
		if (!this.model.isEdge(cell)) {
			// Possible to return any string here
			//return "ID=" + cell.id + ' mIsTop=' + mIsTop + ' mLabelName=' + mLabelName;
			return cell[mLabelName];
		}
		return null;
	};
	
	// Creates the shape for the shape number and puts it into the draw pane
	var createShape = graph.cellRenderer.createShape;
	graph.cellRenderer.createShape = function(state) {
		createShape.apply(this, arguments);
		if( graph[mLabelName + 'Visible'] && !state.cell.geometry.relative ) {
			var label = graph['get' + mLabelName](state.cell);
			if( label != null && state.shape != null && state[mLabelName] == null ) {
				state[mLabelName] = new mxText(label, new mxRectangle(),
						mxConstants.ALIGN_LEFT, mxConstants.ALIGN_BOTTOM);
				// Styles the label
				state[mLabelName].color = 'black';
				state[mLabelName].family = 'Verdana';
				state[mLabelName].size = 8;
				state[mLabelName].fontStyle = mxConstants.FONT_ITALIC;
				state[mLabelName].background = 'yellow';
				state[mLabelName].border = 'black';
				
				state[mLabelName].dialect = state.shape.dialect;
				state[mLabelName].init(state.view.getDrawPane());
			}
		}
	};
	
	// Redraws the shape number after the cell has been moved/resized
	var redraw = graph.cellRenderer.redraw;
	graph.cellRenderer.redraw = function(state) {
		redraw.apply(this, arguments);
		if( state.shape != null && state[mLabelName] != null ) {
			var scale = graph.getView().getScale();
			var bounds = null;
			if( mIsTop )
				bounds = new mxRectangle(state.x + state.width - 8 * scale, state.y + 8 * scale, 0, 0);
			else
				bounds = new mxRectangle(state.x + state.width - 8 * scale, state.y + state.height + 8 * scale, 0, 0);
			state[mLabelName].state = state;
			state[mLabelName].value = graph['get' + mLabelName](state.cell);
			state[mLabelName].scale = scale;
			state[mLabelName].bounds = bounds;
			state[mLabelName].redraw();
		}
	};
	
	// Destroys the shape number
	var destroy = graph.cellRenderer.destroy;
	graph.cellRenderer.destroy = function(state) {
		destroy.apply(this, arguments);
		if (state[mLabelName] != null) {
			state[mLabelName].destroy();
			state[mLabelName] = null;
		}
	};
	
}


function createButtons(containerID, Y) {
	var container = Y.one('#' + containerID);
	var btnContainerHTML = '<div id="' + containerID + 'BtnContainer"></div>';
	container.get('children').slice(-1).item(0).insert(btnContainerHTML, 'after');
	var btnContainer = Y.one('#' + containerID + 'BtnContainer');
	var zoomInBtn = createButton(btnContainer, ' + ', containerID + 'ZoomInBtn');
	var zoomOutBtn = createButton(btnContainer, ' - ', containerID + 'ZoomOutBtn');
	var hierLayoutBtn = createButton(btnContainer, 'layout', containerID + 'HierLayoutBtn');
	//Add a <br> to separate the two button groups
	//var brHTML = '<br/>';
	//btnContainer.insert(brHTML);
	//var propertiesBtn = createButton(btnContainer, 'properties', containerID + 'PropertiesBtn');
	//ENCODING
	//var encodingBtn = createButton(btnContainer, 'encoding', containerID + 'EncodingBtn');
}

function activateButtons(graph, hierLayout, parent, containerID, Y) {
	var zoomInBtn = Y.one('#' + containerID + 'ZoomInBtn');
	var zoomInBtnFunc = function() { graph.zoomIn(); } ;
	zoomInBtn.set('onclick', zoomInBtnFunc);
	var zoomOutBtn = Y.one('#' + containerID + 'ZoomOutBtn');
	var zoomOutBtnFunc = function() { graph.zoomOut(); } ;
	zoomOutBtn.set('onclick', zoomOutBtnFunc);
	var hierLayoutBtn = Y.one('#' + containerID + 'HierLayoutBtn');
	var hierLayoutBtnFunc = function() { hierLayout.execute(parent); } ;
	hierLayoutBtn.set('onclick', hierLayoutBtnFunc);
}

function createButton(container, label, btnId){
    var button = document.createElement("input");
    button.id = btnId;
    button.type = "button";
    button.value = label;
    container.insert(button);
    return button;
}

function createWFTabs(containerID, Y) {
	var container = Y.one('#' + containerID);
	var tabsContainerHTML = '<div id="' + containerID + 'tabsContainer"></div>';
	container.get('children').slice(-1).item(0).insert(tabsContainerHTML, 'after');
	var tabsContainer = Y.one('#' + containerID + 'tabsContainer');
	var loadWFTabContainerID = 'loadWFTabContainer';
	var queryWFTabContainerID = 'queryWFTabContainer';
	var loadTabContent = '<div id="' + loadWFTabContainerID + '">Database name: ' + 
		'<input type="text" id="dbnameTextfield" size="15"><br/>' +
		'<input type="button" id="dbnameLoadBtn" value="Load"><br/><br/>Workflow id:<br/>' +
		'<select id="wfIdsSelect"></select>' + 
		'<br/><br/><input id="' + containerID + 'PropertiesBtn" type="button" value="properties">' +
		'<input id="' + containerID + 'EncodingBtn" type="button" value="encoding"></div>';
	var queryTabContent = '<div id="' + queryWFTabContainerID + '">' +
		'<select id="wfQuerySelect"></select>' + '<br/><br/>' + 
		'<textarea id="wfQueryText" rows="6" cols="50">Query text.</textarea>' + '<br/><br/>' +
		'<input id="wfQueryExecuteBtn" type="button" value="Execute">' +
		'<input id="wfQueryClearBtn" type="button" value="Clear">' +
		'</div>';
	var tabview = new Y.TabView({
        children: [{
            label: 'Load',
            content: loadTabContent
        }, {
            label: 'Query',
            content: queryTabContent
        }]
    });
    tabview.render(tabsContainer);
    createWFQueriesMenu(Y);
}

function createWFQueriesMenu(Y) {
	var wfQdescs =['Compute number of invocations of a workflow task',
	               'Find all inputs of a workflow across runs',
	               'Find the modules of tasks that were not completed',
	                ];
	var wfQueries =['START n = node:node_auto_index(name="e30_vtkCamera") \n MATCH m-[:wasAssociatedWith]-n \n RETURN count(m)',
	                'START n=node(*) \n MATCH (n)<-[:used]-() \n WHERE not ((n)-[:wasGeneratedBy]->()) \n AND (n.wfID="72ff0f9f-1892-49e0-b472-fb99e9a3870d") \n RETURN DISTINCT n.name;',      
	                'START n=node(*) \n MATCH n<-[:wasAssociatedWith]-m \n WHERE HAS(n.vtType) AND HAS(n.wfID) AND HAS(n.runID) \n AND n.vtType="vt:module_exec" AND n.completed="-1" \n AND n.wfID="b64b7cf9-5561-4cac-b89c-1ed8c49ba654" \n AND n.runID="a0" \n RETURN m.name',     
	                ];
	var wfQuerySelect = Y.one('#wfQuerySelect');
	var wfQueryText = Y.one('#wfQueryText');
	for(var i = 0; i < wfQdescs.length; i++) {
		var opt = Y.Node.create('<option value=""></option>');
		wfQuerySelect.append(opt);
		wfQuerySelect.get('options').item(i).set('text', wfQdescs[i]);
		wfQuerySelect.get('options').item(i).set('value', i);
	}
	wfQueryText.set('value', wfQueries[0]);
	var changeQueryFunc = function() { 
			var idx = wfQuerySelect.get('value');
			wfQueryText.set('value', wfQueries[idx]);
		} ;
	wfQuerySelect.set('onchange', changeQueryFunc);
}

function createTraceTabs(containerID, Y) {
	var container = Y.one('#' + containerID);
	var tabsContainerHTML = '<div id="' + containerID + 'tabsContainer"></div>';
	container.get('children').slice(-1).item(0).insert(tabsContainerHTML, 'after');
	var tabsContainer = Y.one('#' + containerID + 'tabsContainer');
	var loadTraceTabContainerID = 'loadTraceTabContainer';
	var queryTraceTabContainerID = 'queryTraceTabContainer';
	var loadTabContent = '<div id="' + loadTraceTabContainerID + '">Trace id:<br/>' +
	'<select id="traceIdsSelect"><option value=""></option></select>' + 
	'<br/><br/><input id="' + containerID + 'PropertiesBtn" type="button" value="properties">' +
	'<input id="' + containerID + 'EncodingBtn" type="button" value="encoding"></div>';
	var queryTabContent = '<div id="' + queryTraceTabContainerID + '">' +
	'<select id="wfQuerySelect"></select>' + '<br/><br/>' + 
	'<textarea id="wfQueryText" rows="4" cols="30">Query text.</textarea>' + '<br/><br/>' +
	'<input id="wfQueryExecuteBtn" type="button" value="Execute">' +
	'<input id="wfQueryClearBtn" type="button" value="Clear">' +
	'</div>';
	var tabview = new Y.TabView({
        children: [{
            label: 'Load',
            content: loadTabContent
        }, {
            label: 'Query',
            content: queryTabContent
        }]
    });
    tabview.render(tabsContainer);
}

function callGraphRestfulWS(url, container, btnContainer, isTrace, Y) {
	Y.io(url, {
		//data: 'suspect=butler',
		on: {
			complete: function (id, response) {
				if (response.status >= 200 && response.status < 300) {
					var json = Y.JSON.parse(response.responseText);
					displayGraphJSON(container, json, btnContainer, isTrace, Y);
					//alert(JSON.stringify(json, null, 4));
				}
				else {
					alert('ERROR');
				}
			}
		}
	});
}

function callWfWS(Y) {
	var url = 'webresources/wfresource';
	var container = document.getElementById('wfContainer');
	var btnContainer = 'left';
	var isTrace = false;
	var dbnameTxtField = Y.one('#dbnameTextfield');
	var dbnameParam = dbnameTxtField.get('value');
	var wfIdsSelect = Y.one('#wfIdsSelect');
	var wfIdParam = wfIdsSelect.get('value');
	Y.io(url, {
		data: 'dbname=' + dbnameParam + '&wfid=' + wfIdParam,
		on: {
			complete: function (id, response) {
				if (response.status >= 200 && response.status < 300) {
					var json = Y.JSON.parse(response.responseText);
					displayGraphJSON(container, json, btnContainer, isTrace, Y);
				}
				else {
					alert('ERROR');
				}
			}
		}
	});
}

function callTraceWS(Y) {
	var url = 'webresources/traceresource';
	var container = document.getElementById('traceContainer');
	var btnContainer = 'right';
	var isTrace = true;
	var dbnameTxtField = Y.one('#dbnameTextfield');
	var dbnameParam = dbnameTxtField.get('value');
	var wfIdsSelect = Y.one('#wfIdsSelect');
	var wfIdParam = wfIdsSelect.get('value');
	var traceIdsSelect = Y.one('#traceIdsSelect');
	var traceIdParam = traceIdsSelect.get('value');
	Y.io(url, {
		data: 'dbname=' + dbnameParam + '&wfid=' + wfIdParam + '&traceid=' + traceIdParam,
		on: {
			complete: function (id, response) {
				if (response.status >= 200 && response.status < 300) {
					var json = Y.JSON.parse(response.responseText);
					displayGraphJSON(container, json, btnContainer, isTrace, Y);
				}
				else {
					alert('ERROR');
				}
			}
		}
	});
}

function callWfIdsWS(Y) {
	var url = 'webresources/wfidsresource';
	var dbnameTxtField = Y.one('#dbnameTextfield');
	var dbnameParam = dbnameTxtField.get('value');
	//alert('value: ' + dbnameParam);
	Y.io(url, {
		data: 'dbname=' + dbnameParam,
		on: {
			complete: function (id, response) {
				if (response.status >= 200 && response.status < 300) {
					var jsonArray = Y.JSON.parse(response.responseText);
					var wfIdsSelect = Y.one('#wfIdsSelect');
					wfIdsSelect.get('childNodes').remove();
					for(var i = 0; i < jsonArray.length; i++) {
						var opt = Y.Node.create('<option value=""></option>');
						wfIdsSelect.append(opt);
						wfIdsSelect.get('options').item(i).set('text', i+1);
						wfIdsSelect.get('options').item(i).set('value', jsonArray[i]);
					}
					//CALL
					callWfWS(Y);
					callTraceIdsWS(Y);
				}
				else {
					alert('ERROR');
				}
			}
		}
	});
}

function callTraceIdsWS(Y) {
	var url = 'webresources/traceidsresource';
	var dbnameTxtField = Y.one('#dbnameTextfield');
	var dbnameParam = dbnameTxtField.get('value');
	var wfIdsSelect = Y.one('#wfIdsSelect');
	var wfIdParam = wfIdsSelect.get('value');
	//alert('the wfIdParam: ' + wfIdParam);
	Y.io(url, {
		data: 'dbname=' + dbnameParam + '&wfid=' + wfIdParam,
		on: {
			complete: function (id, response) {
				if (response.status >= 200 && response.status < 300) {
					var jsonArray = Y.JSON.parse(response.responseText);
					var traceIdsSelect = Y.one('#traceIdsSelect');
					traceIdsSelect.get('childNodes').remove();
					for(var i = 0; i < jsonArray.length; i++) {
						var opt = Y.Node.create('<option value=""></option>');
						traceIdsSelect.append(opt);
						traceIdsSelect.get('options').item(i).set('text', i+1);
						traceIdsSelect.get('options').item(i).set('value', jsonArray[i]);
					}
					//Add event for loading traces
					var loadTraceFunc = function() { callTraceWS(Y); } ;
					traceIdsSelect.set('onchange', loadTraceFunc);
					//CALL
					callTraceWS(Y);
				}
				else {
					alert('ERROR');
				}
			}
		}
	});
}


YUI().use('gallery-axo-layout', 'resize', function(Y) {
	var layout = new Y.Layout({orientation: 'vertical', sizeToWindow: true });
	layout.add(new Y.LayoutChild({id:'top', height:30, resize: true }));

	var centerLayout = new Y.Layout({fluid: true, orientation: 'horizontal' });
	layout.add(centerLayout);

	var bottomLayout = new Y.Layout({id:'bottom', height:35, orientation: 'horizontal', resize: true });
	layout.add(bottomLayout);
	
	centerLayout.add(new Y.LayoutChildStd({id: 'left', width:155, resize: true, label: 'Workflow'}));
	centerLayout.add(new Y.LayoutChildStd({id: 'center1', width:530, resize: true, label: ' '}));
	centerLayout.add(new Y.LayoutChildStd({id: 'center2', fluid: true, label: ' '}));
	centerLayout.add(new Y.LayoutChildStd({id: 'right', width:120, resize: true, label: 'Trace'}));

	bottomLayout.add(new Y.LayoutChild({id: 'bottom1'}));

	layout.render();
});

YUI().use('node', 'tabview', function (Y) {
	var center1 = Y.one('#center1');
	var wfContainerHTML = '<div id="wfContainer"></div>';
	center1.get('children').slice(-1).item(0).insert(wfContainerHTML, 'after');
	var center2 = Y.one('#center2');
	var traceContainerHTML = '<div id="traceContainer"></div>';
	center2.get('children').slice(-1).item(0).insert(traceContainerHTML, 'after');
	createButtons('left', Y);
	createButtons('right', Y);
	createWFTabs('left', Y);
	createTraceTabs('right', Y);
});

YUI().use('node', 'json-parse', 'io-base', function (Y) {
	var dbnameLoadBtn = Y.one('#dbnameLoadBtn');
	var dbnameLoadBtnFunc = function() { callWfIdsWS(Y); } ;
	dbnameLoadBtn.set('onclick', dbnameLoadBtnFunc);
});

/*
YUI().use('node', 'json-parse', 'io-base', function (Y) {
	var wfJSONStr = '{"edges":[{"endNodeId":"e15_StatisticsAlongSpatialAxis","edgeLabel":"","startNodeId":"e7_Regrid"},{"endNodeId":"e14_CDMSCell","edgeLabel":"","startNodeId":"e13_CDMSBoxfill"},{"endNodeId":"e13_CDMSBoxfill","edgeLabel":"","startNodeId":"e15_StatisticsAlongSpatialAxis"},{"endNodeId":"e11_TemporalAggregation","edgeLabel":"","startNodeId":"e7_Regrid"},{"endNodeId":"e7_Regrid","edgeLabel":"","startNodeId":"e1_CDMSVariable"},{"endNodeId":"e6_CDMSCell","edgeLabel":"","startNodeId":"e5_CDMSBoxfill"},{"endNodeId":"e5_CDMSBoxfill","edgeLabel":"","startNodeId":"e11_TemporalAggregation"}],"nodes":[{"nodeId":"e1_CDMSVariable"},{"nodeId":"e15_StatisticsAlongSpatialAxis"},{"nodeId":"e14_CDMSCell"},{"nodeId":"e13_CDMSBoxfill"},{"nodeId":"e11_TemporalAggregation"},{"nodeId":"e7_Regrid"},{"nodeId":"e6_CDMSCell"},{"nodeId":"e5_CDMSBoxfill"}]}';  
	var wfJSON = Y.JSON.parse(wfJSONStr);
	//var traceJSONStr = '{"edges":[{"endNodeId":"p0","edgeLabel":"u","startNodeId":"a0"},{"endNodeId":"p0","edgeLabel":"u","startNodeId":"a1"},{"endNodeId":"p1","edgeLabel":"u","startNodeId":"a3"},{"endNodeId":"p1","edgeLabel":"u","startNodeId":"a4"},{"endNodeId":"p1","edgeLabel":"u","startNodeId":"a5"},{"endNodeId":"p1","edgeLabel":"u","startNodeId":"a6"},{"endNodeId":"p1","edgeLabel":"u","startNodeId":"a2"},{"endNodeId":"p2","edgeLabel":"u","startNodeId":"a8"},{"endNodeId":"p2","edgeLabel":"u","startNodeId":"a7"},{"endNodeId":"p3","edgeLabel":"u","startNodeId":"a10"},{"endNodeId":"p3","edgeLabel":"u","startNodeId":"a11"},{"endNodeId":"p4","edgeLabel":"u","startNodeId":"a13"},{"endNodeId":"p4","edgeLabel":"u","startNodeId":"a14"},{"endNodeId":"p4","edgeLabel":"u","startNodeId":"a15"},{"endNodeId":"p4","edgeLabel":"u","startNodeId":"a16"},{"endNodeId":"p4","edgeLabel":"u","startNodeId":"a12"},{"endNodeId":"p5","edgeLabel":"u","startNodeId":"a18"},{"endNodeId":"p5","edgeLabel":"u","startNodeId":"a17"},{"endNodeId":"p6","edgeLabel":"u","startNodeId":"a20"},{"endNodeId":"p6","edgeLabel":"u","startNodeId":"a9"},{"endNodeId":"p6","edgeLabel":"u","startNodeId":"a19"},{"endNodeId":"p7","edgeLabel":"u","startNodeId":"a21"},{"endNodeId":"p8","edgeLabel":"u","startNodeId":"a22"},{"endNodeId":"p8","edgeLabel":"u","startNodeId":"a23"},{"endNodeId":"p8","edgeLabel":"u","startNodeId":"a19"},{"endNodeId":"p9","edgeLabel":"u","startNodeId":"a25"},{"endNodeId":"p9","edgeLabel":"u","startNodeId":"a26"},{"endNodeId":"p9","edgeLabel":"u","startNodeId":"a9"},{"endNodeId":"p9","edgeLabel":"u","startNodeId":"a19"},{"endNodeId":"p10","edgeLabel":"u","startNodeId":"a28"},{"endNodeId":"p10","edgeLabel":"u","startNodeId":"a29"},{"endNodeId":"p10","edgeLabel":"u","startNodeId":"a9"},{"endNodeId":"p10","edgeLabel":"u","startNodeId":"a19"},{"endNodeId":"p11","edgeLabel":"u","startNodeId":"a31"},{"endNodeId":"p11","edgeLabel":"u","startNodeId":"a24"},{"endNodeId":"p11","edgeLabel":"u","startNodeId":"a27"},{"endNodeId":"p11","edgeLabel":"u","startNodeId":"a30"},{"endNodeId":"p12","edgeLabel":"u","startNodeId":"a33"},{"endNodeId":"p12","edgeLabel":"u","startNodeId":"a34"},{"endNodeId":"p13","edgeLabel":"u","startNodeId":"a32"},{"endNodeId":"p13","edgeLabel":"u","startNodeId":"a35"},{"endNodeId":"p14","edgeLabel":"u","startNodeId":"a36"},{"endNodeId":"p14","edgeLabel":"u","startNodeId":"a37"},{"endNodeId":"p14","edgeLabel":"u","startNodeId":"a21"},{"endNodeId":"a2","edgeLabel":"g","startNodeId":"p0"},{"endNodeId":"a7","edgeLabel":"g","startNodeId":"p1"},{"endNodeId":"a9","edgeLabel":"g","startNodeId":"p2"},{"endNodeId":"a12","edgeLabel":"g","startNodeId":"p3"},{"endNodeId":"a17","edgeLabel":"g","startNodeId":"p4"},{"endNodeId":"a19","edgeLabel":"g","startNodeId":"p5"},{"endNodeId":"a21","edgeLabel":"g","startNodeId":"p6"},{"endNodeId":"a24","edgeLabel":"g","startNodeId":"p8"},{"endNodeId":"a27","edgeLabel":"g","startNodeId":"p9"},{"endNodeId":"a30","edgeLabel":"g","startNodeId":"p10"},{"endNodeId":"a32","edgeLabel":"g","startNodeId":"p11"},{"endNodeId":"a35","edgeLabel":"g","startNodeId":"p12"}],"nodes":[{"nodeId":"a17","nodeType":"d"},{"nodeId":"p7","nodeType":"i"},{"nodeId":"a3","nodeType":"d"},{"nodeId":"p0","nodeType":"i"},{"nodeId":"p11","nodeType":"i"},{"nodeId":"a35","nodeType":"d"},{"nodeId":"a24","nodeType":"d"},{"nodeId":"a36","nodeType":"d"},{"nodeId":"a9","nodeType":"d"},{"nodeId":"p14","nodeType":"i"},{"nodeId":"a16","nodeType":"d"},{"nodeId":"a10","nodeType":"d"},{"nodeId":"a14","nodeType":"d"},{"nodeId":"a23","nodeType":"d"},{"nodeId":"a22","nodeType":"d"},{"nodeId":"a8","nodeType":"d"},{"nodeId":"a25","nodeType":"d"},{"nodeId":"a37","nodeType":"d"},{"nodeId":"p3","nodeType":"i"},{"nodeId":"a27","nodeType":"d"},{"nodeId":"p10","nodeType":"i"},{"nodeId":"a21","nodeType":"d"},{"nodeId":"p8","nodeType":"i"},{"nodeId":"a34","nodeType":"d"},{"nodeId":"a7","nodeType":"d"},{"nodeId":"a20","nodeType":"d"},{"nodeId":"a1","nodeType":"d"},{"nodeId":"a2","nodeType":"d"},{"nodeId":"a11","nodeType":"d"},{"nodeId":"a29","nodeType":"d"},{"nodeId":"p2","nodeType":"i"},{"nodeId":"a33","nodeType":"d"},{"nodeId":"a18","nodeType":"d"},{"nodeId":"a26","nodeType":"d"},{"nodeId":"p12","nodeType":"i"},{"nodeId":"p9","nodeType":"i"},{"nodeId":"a13","nodeType":"d"},{"nodeId":"a28","nodeType":"d"},{"nodeId":"a30","nodeType":"d"},{"nodeId":"a4","nodeType":"d"},{"nodeId":"p4","nodeType":"i"},{"nodeId":"a31","nodeType":"d"},{"nodeId":"a19","nodeType":"d"},{"nodeId":"p1","nodeType":"i"},{"nodeId":"a15","nodeType":"d"},{"nodeId":"a6","nodeType":"d"},{"nodeId":"a12","nodeType":"d"},{"nodeId":"a0","nodeType":"d"},{"nodeId":"p6","nodeType":"i"},{"nodeId":"a5","nodeType":"d"},{"nodeId":"a32","nodeType":"d"},{"nodeId":"p5","nodeType":"i"},{"nodeId":"p13","nodeType":"i"}]}' ;     
	var traceJSONStr = '{"edges":[{"endNodeId":"e19","edgeLabel":"used","startNodeId":"a7_CDMSBoxfill"},{"endNodeId":"e18","edgeLabel":"used","startNodeId":"a6_TemporalAggregation"},{"endNodeId":"e17","edgeLabel":"used","startNodeId":"a8_CDMSCell"},{"endNodeId":"e16_statistics","edgeLabel":"used","startNodeId":"a3_StatisticsAlongSpatialAxis"},{"endNodeId":"e22","edgeLabel":"used","startNodeId":"a4_CDMSBoxfill"},{"endNodeId":"e12_temporal_granularity","edgeLabel":"used","startNodeId":"a6_TemporalAggregation"},{"endNodeId":"e21","edgeLabel":"used","startNodeId":"a3_StatisticsAlongSpatialAxis"},{"endNodeId":"e9_latitude_interval","edgeLabel":"used","startNodeId":"a2_Regrid"},{"endNodeId":"e10_regrid_method","edgeLabel":"used","startNodeId":"a2_Regrid"},{"endNodeId":"e23","edgeLabel":"used","startNodeId":"a2_Regrid"},{"endNodeId":"e8_longitude_interval","edgeLabel":"used","startNodeId":"a2_Regrid"},{"endNodeId":"e20","edgeLabel":"used","startNodeId":"a5_CDMSCell"},{"endNodeId":"e3_name","edgeLabel":"used","startNodeId":"a1_CDMSVariable"},{"endNodeId":"e4_varNameInFile","edgeLabel":"used","startNodeId":"a1_CDMSVariable"},{"endNodeId":"e2_file","edgeLabel":"used","startNodeId":"a1_CDMSVariable"},{"endNodeId":"a1_CDMSVariable","edgeLabel":"wasGeneratedBy","startNodeId":"e23"},{"endNodeId":"a2_Regrid","edgeLabel":"wasGeneratedBy","startNodeId":"e21"},{"endNodeId":"a2_Regrid","edgeLabel":"wasGeneratedBy","startNodeId":"e18"},{"endNodeId":"a3_StatisticsAlongSpatialAxis","edgeLabel":"wasGeneratedBy","startNodeId":"e22"},{"endNodeId":"a4_CDMSBoxfill","edgeLabel":"wasGeneratedBy","startNodeId":"e20"},{"endNodeId":"a6_TemporalAggregation","edgeLabel":"wasGeneratedBy","startNodeId":"e19"},{"endNodeId":"a7_CDMSBoxfill","edgeLabel":"wasGeneratedBy","startNodeId":"e17"}],"nodes":[{"nodeId":"e19"},{"nodeId":"e18"},{"nodeId":"e17"},{"nodeId":"e16_statistics"},{"nodeId":"e22"},{"nodeId":"e12_temporal_granularity"},{"nodeId":"e21"},{"nodeId":"e9_latitude_interval"},{"nodeId":"e10_regrid_method"},{"nodeId":"e23"},{"nodeId":"e8_longitude_interval"},{"nodeId":"e20"},{"nodeId":"e3_name"},{"nodeId":"e4_varNameInFile"},{"nodeId":"e2_file"},{"nodeId":"a1_CDMSVariable"},{"nodeId":"a2_Regrid"},{"nodeId":"a3_StatisticsAlongSpatialAxis"},{"nodeId":"a4_CDMSBoxfill"},{"nodeId":"a5_CDMSCell"},{"nodeId":"a6_TemporalAggregation"},{"nodeId":"a7_CDMSBoxfill"},{"nodeId":"a8_CDMSCell"}]}';  
	var traceJSON = Y.JSON.parse(traceJSONStr);
	//var wfContainer1 = Y.one('#wfContainer');
	var urlWF = 'webresources/exampledaoworkflow';
	var wfContainer2 = document.getElementById('wfContainer');
	//callGraphRestfulWS(urlWF, wfContainer2, 'left', false, Y);
	//alert('wfContainer1: ' + wfContainer1 + '\n' + 'wfContainer2: ' + wfContainer2);
	//displayGraphJSON(wfContainer2, wfJSON, 'left', false, Y);
	var urlTrace = 'webresources/exampledaotrace';
	var traceContainer = document.getElementById('traceContainer');
	//displayGraphJSON(traceContainer, traceJSON, 'right', true, Y);
	//callGraphRestfulWS(urlTrace, traceContainer, 'right', true, Y);
});
*/

</script>


</body>
</html>
