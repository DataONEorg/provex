/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package org.dataone.daks.provexdb.DAO.models.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import org.dataone.daks.provexdb.DAO.models.dao.UserRequestDetailDao;
import org.dataone.daks.provexdb.DAO.models.dto.UserRequestDetail;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class UserRequestDetailDaoImpl extends AbstractDaoImpl<UserRequestDetail> implements UserRequestDetailDao {

    private static final String TABLE_NAME = "user_request_detail";

    protected static final String SELECT_COLUMNS = "reqId, stageId, reqType, nodeId, targetNodeId";

    private static final String SQL_INSERT = "INSERT INTO user_request_detail (reqId,stageId,reqType,nodeId,targetNodeId) VALUES (?,?,?,?,?)";

    public UserRequestDetailDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record.
     */
    public UserRequestDetail findByReqId( String reqId ) {
        return findOne( "reqId=?", reqId);
    }

    /**
     * Inserts a new record.
     */
    public void insert( UserRequestDetail dto ) throws DaoException {
        PreparedStatement stmt = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT );

            if ( dto.getReqId() == null ) {
                throw new DaoException("Value of column 'reqId' cannot be null");
            }
            checkMaxLength( "reqId", dto.getReqId(), 32 );
            stmt.setString( 1, dto.getReqId() );

            if ( dto.getStageId() == null ) {
                throw new DaoException("Value of column 'stageId' cannot be null");
            }
            checkMaxLength( "stageId", dto.getStageId(), 32 );
            stmt.setString( 2, dto.getStageId() );

            if ( dto.getReqType() == null ) {
                throw new DaoException("Value of column 'reqType' cannot be null");
            }
            checkMaxLength( "reqType", dto.getReqType(), 32 );
            stmt.setString( 3, dto.getReqType() );

            if ( dto.getNodeId() == null ) {
                throw new DaoException("Value of column 'nodeId' cannot be null");
            }
            checkMaxLength( "nodeId", dto.getNodeId(), 32 );
            stmt.setString( 4, dto.getNodeId() );

            if ( dto.getTargetNodeId() != null ) {
                checkMaxLength( "targetNodeId", dto.getTargetNodeId(), 32 );
            }
            stmt.setString( 5, dto.getTargetNodeId() );

            int n = stmt.executeUpdate();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected UserRequestDetail fetch( ResultSet rs ) throws SQLException {
        UserRequestDetail dto = new UserRequestDetail();
        dto.setReqId( rs.getString( 1 ));
        dto.setStageId( rs.getString( 2 ));
        dto.setReqType( rs.getString( 3 ));
        dto.setNodeId( rs.getString( 4 ));
        dto.setTargetNodeId( rs.getString( 5 ));

        return dto;
    }

    protected UserRequestDetail[] toArray(ArrayList<UserRequestDetail> list ) {
        UserRequestDetail[] ret = new UserRequestDetail[ list.size() ];
        return list.toArray( ret );
    }

}
