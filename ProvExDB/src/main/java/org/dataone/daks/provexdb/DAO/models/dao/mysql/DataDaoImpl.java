/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package org.dataone.daks.provexdb.DAO.models.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import org.dataone.daks.provexdb.DAO.models.dao.DataDao;
import org.dataone.daks.provexdb.DAO.models.dto.Data;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class DataDaoImpl extends AbstractDaoImpl<Data> implements DataDao {

    private static final String TABLE_NAME = "data";

    protected static final String SELECT_COLUMNS = "nodeId, nodeType, nodeDesc, valType, val, contId";

    private static final String SQL_INSERT = "INSERT INTO data (nodeId,nodeType,nodeDesc,valType,val,contId) VALUES (?,?,?,?,?,?)";

    public DataDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record.
     */
    public Data findByNodeId( String nodeId ) {
        return findOne( "nodeId=?", nodeId);
    }

    /**
     * Inserts a new record.
     */
    public void insert( Data dto ) throws DaoException {
        PreparedStatement stmt = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT );

            if ( dto.getNodeId() == null ) {
                throw new DaoException("Value of column 'nodeId' cannot be null");
            }
            checkMaxLength( "nodeId", dto.getNodeId(), 32 );
            stmt.setString( 1, dto.getNodeId() );

            if ( dto.getNodeType() == null ) {
                throw new DaoException("Value of column 'nodeType' cannot be null");
            }
            checkMaxLength( "nodeType", dto.getNodeType(), 1 );
            stmt.setString( 2, dto.getNodeType() );

            if ( dto.getNodeDesc() == null ) {
                throw new DaoException("Value of column 'nodeDesc' cannot be null");
            }
            checkMaxLength( "nodeDesc", dto.getNodeDesc(), 100 );
            stmt.setString( 3, dto.getNodeDesc() );

            if ( dto.getValType() == null ) {
                throw new DaoException("Value of column 'valType' cannot be null");
            }
            checkMaxLength( "valType", dto.getValType(), 1 );
            stmt.setString( 4, dto.getValType() );

            if ( dto.getVal() != null ) {
                checkMaxLength( "val", dto.getVal(), 2000 );
            }
            stmt.setString( 5, dto.getVal() );

            if ( dto.getContId() != null ) {
                checkMaxLength( "contId", dto.getContId(), 32 );
            }
            stmt.setString( 6, dto.getContId() );

            int n = stmt.executeUpdate();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected Data fetch( ResultSet rs ) throws SQLException {
        Data dto = new Data();
        dto.setNodeId( rs.getString( 1 ));
        dto.setNodeType( rs.getString( 2 ));
        dto.setNodeDesc( rs.getString( 3 ));
        dto.setValType( rs.getString( 4 ));
        dto.setVal( rs.getString( 5 ));
        dto.setContId( rs.getString( 6 ));

        return dto;
    }

    protected Data[] toArray(ArrayList<Data> list ) {
        Data[] ret = new Data[ list.size() ];
        return list.toArray( ret );
    }

}
