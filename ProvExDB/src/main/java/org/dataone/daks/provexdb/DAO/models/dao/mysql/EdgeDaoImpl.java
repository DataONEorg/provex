/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package org.dataone.daks.provexdb.DAO.models.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import org.dataone.daks.provexdb.DAO.models.dao.EdgeDao;
import org.dataone.daks.provexdb.DAO.models.dto.Edge;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class EdgeDaoImpl extends AbstractDaoImpl<Edge> implements EdgeDao {

    private static final String TABLE_NAME = "edge";

    protected static final String SELECT_COLUMNS = "traceId, startNodeId, endNodeId, edgeLabel, edgeType";

    private static final String SQL_INSERT = "INSERT INTO edge (traceId,startNodeId,endNodeId,edgeLabel,edgeType) VALUES (?,?,?,?,?)";

    public EdgeDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds records.
     */
    public Edge[] findByTrace( String traceId ) {
        return findManyArray( "traceId=?", 0, -1, traceId);
    }

    /**
     * Inserts a new record.
     */
    public void insert( Edge dto ) throws DaoException {
        PreparedStatement stmt = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT );

            if ( dto.getTraceId() == null ) {
                throw new DaoException("Value of column 'traceId' cannot be null");
            }
            checkMaxLength( "traceId", dto.getTraceId(), 32 );
            stmt.setString( 1, dto.getTraceId() );

            if ( dto.getStartNodeId() == null ) {
                throw new DaoException("Value of column 'startNodeId' cannot be null");
            }
            checkMaxLength( "startNodeId", dto.getStartNodeId(), 32 );
            stmt.setString( 2, dto.getStartNodeId() );

            if ( dto.getEndNodeId() == null ) {
                throw new DaoException("Value of column 'endNodeId' cannot be null");
            }
            checkMaxLength( "endNodeId", dto.getEndNodeId(), 32 );
            stmt.setString( 3, dto.getEndNodeId() );

            if ( dto.getEdgeLabel() == null ) {
                throw new DaoException("Value of column 'edgeLabel' cannot be null");
            }
            checkMaxLength( "edgeLabel", dto.getEdgeLabel(), 32 );
            stmt.setString( 4, dto.getEdgeLabel() );

            if ( dto.getEdgeType() == null ) {
                throw new DaoException("Value of column 'edgeType' cannot be null");
            }
            checkMaxLength( "edgeType", dto.getEdgeType(), 32 );
            stmt.setString( 5, dto.getEdgeType() );

            int n = stmt.executeUpdate();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected Edge fetch( ResultSet rs ) throws SQLException {
        Edge dto = new Edge();
        dto.setTraceId( rs.getString( 1 ));
        dto.setStartNodeId( rs.getString( 2 ));
        dto.setEndNodeId( rs.getString( 3 ));
        dto.setEdgeLabel( rs.getString( 4 ));
        dto.setEdgeType( rs.getString( 5 ));

        return dto;
    }

    protected Edge[] toArray(ArrayList<Edge> list ) {
        Edge[] ret = new Edge[ list.size() ];
        return list.toArray( ret );
    }

}
